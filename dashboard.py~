# dashboard.py
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import database

st.set_page_config(layout="wide")

st.title("Analizator Rynku GPW")


@st.cache_data(ttl=600)  # Cache'uje dane na 10 minut
def load_data_from_db():
    """Ładuje wszystkie dane z bazy do DataFrame'a z Pandas."""
    conn = database.get_db_connection()
    # 'YYYY-MM-DD' format jest lepszy do sortowania
    query = "SELECT *, substr(date, 7, 4) || '-' || substr(date, 4, 2) || '-' || substr(date, 1, 2) as iso_date FROM daily_quotes"
    df = pd.read_sql_query(query, conn)
    conn.close()
    df['iso_date'] = pd.to_datetime(df['iso_date'], format='%Y-%m-%d', errors='coerce')
    df = df.sort_values('iso_date')
    return df


df = load_data_from_db()

if df.empty:
    st.warning("Brak danych w bazie. Uruchom main.py, aby pobrać dane.")
else:
    st.header("Przegląd Danych")

    # Wybór spółki
    all_tickers = sorted(df['ticker'].unique())
    selected_ticker = st.selectbox("Wybierz spółkę do analizy:", all_tickers,
                                   index=all_tickers.index('CDR') if 'CDR' in all_tickers else 0)

    st.subheader(f"Analiza dla: {selected_ticker}")

    # Filtrowanie danych dla wybranej spółki
    ticker_df = df[df['ticker'] == selected_ticker].copy()

    # Obliczanie prostej średniej kroczącej (SMA) - PIERWSZA ANALIZA!
    sma_period = st.slider("Okres prostej średniej kroczącej (SMA):", min_value=5, max_value=50, value=20, step=1)
    ticker_df[f'SMA_{sma_period}'] = ticker_df['close'].rolling(window=sma_period).mean()

    # Wykres
    fig = go.Figure()

    # Linia ceny zamknięcia
    fig.add_trace(
        go.Scatter(x=ticker_df['iso_date'], y=ticker_df['close'], mode='lines', name='Cena zamknięcia (Close)'))

    # Linia SMA
    fig.add_trace(go.Scatter(x=ticker_df['iso_date'], y=ticker_df[f'SMA_{sma_period}'], mode='lines',
                             name=f'SMA {sma_period} dni', line=dict(color='orange', dash='dash')))

    fig.update_layout(
        title=f'Wykres ceny i SMA dla {selected_ticker}',
        xaxis_title='Data',
        yaxis_title='Cena (PLN)',
        legend_title='Legenda'
    )
    st.plotly_chart(fig, use_container_width=True)

    # Tabela z surowymi danymi
    st.dataframe(ticker_df.sort_values('iso_date', ascending=False), use_container_width=True)