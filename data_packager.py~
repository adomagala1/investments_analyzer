# data_packager.py

import os
import json
import config
from bs4 import BeautifulSoup

# --- ZMIANA: Definiujemy ścieżkę do folderu tymczasowego, tak samo jak w scraper.py ---
TEMP_DIR = "./shit-things"


def extract_data_with_bs4(html_content: str) -> dict:
    # Ta funkcja pozostaje bez zmian, jest poprawna
    soup = BeautifulSoup(html_content, 'lxml')
    rows = soup.find_all('tr', class_='trclass')
    data = {}

    for row in rows:
        try:
            ticker = row.find('td', class_='col4').get_text(strip=True)
            if not ticker: continue

            close_str = row.find('td', class_='col11').get_text(strip=True)
            change_percent_str = row.find('td', class_='col14').get_text(strip=True)
            volume_str = row.find('td', class_='col19').get_text(strip=True)

            data[ticker] = {
                "company_name": row.find('td', class_='col2').get_text(strip=True),
                "currency": row.find('td', class_='col5').get_text(strip=True),
                "close": float(close_str.replace(',', '.').replace('\xa0', '')) if close_str != '-' else None,
                "change_percent": float(change_percent_str.replace(',', '.')) if change_percent_str != '-' else None,
                "volume": int(volume_str.replace('\xa0', '')) if volume_str != '-' else 0
            }
        except (AttributeError, ValueError):
            continue

    return data


def anal_json(date_str: str):
    try:
        # --- ZMIANA: Budujemy pełną ścieżkę do pliku tymczasowego ---
        base_filename = os.getenv("FILENAME")
        if not base_filename:
            print("Błąd: Zmienna FILENAME nie jest ustawiona w pliku .env")
            return

        full_path_to_file = os.path.join(TEMP_DIR, base_filename)

        # --- ZMIANA: Otwieramy plik, używając pełnej ścieżki ---
        with open(full_path_to_file, encoding="utf-8") as f:
            html_content = f.read()

        values = extract_data_with_bs4(html_content)

        out_name = f"{date_str}.json"
        out_path = config.data_path
        full_path = os.path.join(out_path, out_name)
        with open(full_path, "w", encoding="utf-8") as file:
            json.dump(values, file, ensure_ascii=False, indent=4)

        print(f"Dane z notowań GPW zapisane do {out_name}. Znaleziono {len(values)} spółek.")

    except FileNotFoundError:
        print(f"Błąd krytyczny: Nie znaleziono pliku do analizy w ścieżce: {full_path_to_file}")
    except OSError as e:
        print("Błąd pliku: ", e)
    except Exception as e:
        print(f"Wystąpił nieoczekiwany błąd podczas przetwarzania notowań: {e}")